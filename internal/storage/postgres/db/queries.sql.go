// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
)

const findShortIDByURL = `-- name: FindShortIDByURL :one
SELECT short_id FROM urls WHERE original_url = $1 LIMIT 1
`

func (q *Queries) FindShortIDByURL(ctx context.Context, originalUrl string) (string, error) {
	row := q.queryRow(ctx, q.findShortIDByURLStmt, findShortIDByURL, originalUrl)
	var short_id string
	err := row.Scan(&short_id)
	return short_id, err
}

const getURL = `-- name: GetURL :one
UPDATE urls 
SET last_accessed = NOW() 
WHERE short_id = $1 
RETURNING original_url
`

func (q *Queries) GetURL(ctx context.Context, shortID string) (string, error) {
	row := q.queryRow(ctx, q.getURLStmt, getURL, shortID)
	var original_url string
	err := row.Scan(&original_url)
	return original_url, err
}

const storeWithID = `-- name: StoreWithID :exec
INSERT INTO urls (short_id, original_url) 
VALUES ($1, $2) 
ON CONFLICT (original_url) DO NOTHING
`

type StoreWithIDParams struct {
	ShortID     string `json:"short_id"`
	OriginalUrl string `json:"original_url"`
}

func (q *Queries) StoreWithID(ctx context.Context, arg StoreWithIDParams) error {
	_, err := q.exec(ctx, q.storeWithIDStmt, storeWithID, arg.ShortID, arg.OriginalUrl)
	return err
}
